spring.application.name=Benefits Backend
server.port=8080

spring.datasource.url=jdbc:postgresql://localhost:5432/benefits
spring.datasource.username=postgres
spring.datasource.password=postgres
spring.datasource.driver-class-name=org.postgresql.Driver

spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.show-sql=true


spring.security.user.name=admin
spring.security.user.password=admin


#Google OAuth2

#spring.security.oauth2.client.registration.google.client-id=1075054585263-ciqg6vv6b3qj5d8mvuhed0urdu5dvq58.apps.googleusercontent.com
#spring.security.oauth2.client.registration.google.client-secret=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
#spring.security.oauth2.client.registration.google.scope=openid,profile,email
#spring.security.oauth2.client.registration.google.redirect-uri=http://localhost:8080/login/oauth2/code/google
#spring.security.oauth2.client.provider.google.issuer-uri=https://accounts.google.com


spring.security.oauth2.resourceserver.jwt.issuer-uri=https://accounts.google.com

# Accepts only tokens with your client_id as audience
spring.security.oauth2.resourceserver.jwt.audiences=1075054585263-ciqg6vv6b3qj5d8mvuhed0urdu5dvq58.apps.googleusercontent.com

# GraphQL
spring.graphql.graphiql.enabled=true

# CORS
#spring.web.cors.allowed-origins=http://localhost:5173
#spring.web.cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS
#spring.web.cors.allowed-headers=*
#spring.web.cors.allow-credentials=true


